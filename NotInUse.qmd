---
title: "Not_In_Use_Chunks"
format: html
editor: visual
output:
  html_document:
    css: styles.css


```{r}

#Left over code from main

strokeDataSet <- read.csv("healthcare-dataset-stroke-data.csv", na.strings = c("N/A"))


df_for_imputation <- strokeDataSet

# Perform KNN imputation
df_imputed <- kNN(df_for_imputation, variable = "bmi", k = 5, imp_var = FALSE)

# Replace only the NA values in the original bmi column with the imputed values
strokeDataSet$bmi[is.na(strokeDataSet$bmi)] <- df_imputed$bmi[is.na(strokeDataSet$bmi)]
strokeDataSet <- df_imputed
strokeDataSet <- strokeDataSet %>% 
  filter(gender != "Other") %>% # Removing the 1 other
  filter(age >= 18) %>%  # 18+
  mutate(obesity_level = case_when(
    bmi < 18.5 ~ "underweight",
    between(bmi, 18.5, 24.9) ~ "healthy_weight",
    between(bmi, 25, 29.9) ~ "overweight",
    bmi >= 30 ~ "obese",)) %>% # Turning BMI's into weight categories
  mutate(across(c(smoking_status, work_type, ever_married,
                  Residence_type, gender, obesity_level), factor)) %>% # Turning into factors
  select(-id, -bmi) # removing stuff


df_nw <- strokeDataSet %>% filter(work_type == "Never_worked") # 4 people

mod1 <- glm(data = strokeDataSet, stroke ~ ., family = binomial)
summary(mod1)
StrokeData$WorkType

```


```{r}
## more left over code
strokeDataSet <- read_csv("healthcare-dataset-stroke-data.csv")

shinyServer(function(input, output){
  
  ## CODE FOR PAGE 2 SCATTERPLOT
  output$scatterplot <- renderPlot({
   
    if (input$xvar != "Select X Variable" && input$yvar != "Select Y Variable") {
      
      ggplot(strokeDataSet, aes(strokeDataSet[[input$xvar]], strokeDataSet[[input$yvar]])) +
        geom_point(aes(color = strokeDataSet[[input$catvar]])) + labs(x = input$xvar, y = input$yvar)
      #+ scale_y_continuous(breaks = y_breaks)
      #+ ylim(min(strokeDataSet[[input$yvar]],na.rm=T), max(strokeDataSet[[input$yvar]],na.rm=T))
    } else {
      # If one or both variables are not selected, display an empty plot
      return(plot(1, type = "n", xlab = "", ylab = "", main = "Select variables to plot"))
    }
  })
  

```


```{r}
output$dynamic_inputs <- renderUI({
    predictor_inputs <- lapply(input$predictors, function(pred) {
      if (pred == "Gender") {
        selectInput(
          inputId = "input_Gender",
          label = "Gender:",
          choices = c("Male", "Female"),
          selected = "Male"
        )
      }
      else if (pred == "Age"){
        sliderInput(
          inputId = "input_Age",
          label = "Age",
          18, 90, 30
        )
      }
      else if (pred == "Hypertension"){
        selectInput(
          inputId = "input_Hypertension",
          label = "Hypertension",
          choices = c("Yes", "No"),
          selected = "Yes"
        )
      }
      else if (pred == "HeartDisease"){
        selectInput(
          inputId = "input_HeartDisease",
          label = "Heart Disease",
          choices = c("Yes", "No"),
          selected = "Yes"
        )}
      else if (pred == "EverMarried"){
        selectInput(
          inputId = "input_EverMarried",
          label = "Ever Married",
          choices = c("Yes", "No"),
          selected = "Yes"
        )}
      else if (pred == "WorkType"){
        selectInput(
          inputId = "input_WorkType",
          label = "Work Type",
          choices = c("Private", "Government", "Self-Employed", "Never Worked"),
          selected = "Private"
        )}
      else if (pred == "ResidenceType"){
        selectInput(
          inputId = "input_ResidenceType",
          label = "Residence Type",
          choices = c("Urban", "Rural"),
          selected = "Urban"
        )}
      else if (pred == "AvgGlucoseLevel"){
        numericInput( # Subject to change yall
          inputId = "input_AvgGlucoseLevel",
          label = "Average Glucose Level",
          min = 50, max = 300, value = 140
        )}
      else if (pred == "SmokingStatus"){
        selectInput(
          inputId = "input_SmokingStatus",
          label = "Smoking Status",
          choices = c("Never Smoked", "Smokes", "Formerly Smoked"),
          selected = "Never Smoked" 
        )}
      else if (pred == "Height and Weight"){ #Does not work right"
        list(
          tagList(
            numericInput( # Subject to change yall
              inputId = "input_height",
              label = "Height in inches",
              min = 50, max = 300, value = 140
            ),
          ),
          tagList(
            numericInput( # Subject to change yall
              inputId = "input_weight",
              label = "Weight in lbs",
              min = 50, max = 300, value = 140
            )
          )
        )
    }
      else {
        numericInput(
          inputId = paste0("input_", pred),
          label = pred,
          value = 0
        )
      }
    })
    
    # Split the list of UI elements into two equal parts
    n <- length(predictor_inputs)
    
    if (n == 1) {
      # If there is only one predictor, place it in a single column
      fluidRow(
        column(12, do.call(tagList, predictor_inputs))
      )
    } else {
    
    half <- ceiling(n / 2)
    col1 <- predictor_inputs[1:half]
    col2 <- predictor_inputs[(half + 1):n]
    
    # Arrange the elements in two columns
    fluidRow(
      column(6, do.call(tagList, col1)),
      column(6, do.call(tagList, col2))
    )
    }
    #do.call(tagList, predictor_inputs)
  })
  

```

```{r}
observeEvent(input$predict, {
    req(input$predictors)
    
    # Prepare the data for logistic regression
    predictors <- input$predictors[input$predictors != "Gender"]  # Exclude Gender from predictors for model building
    formula <- as.formula(paste("Stroke ~", paste(predictors, collapse = " + ")))
    model <- glm(formula, data = strokeDataSet, family = binomial)
    
    # Gather input values for prediction
    new_data <- data.frame(matrix(ncol = length(predictors), nrow = 1))
    colnames(new_data) <- predictors
    for (pred in predictors) {
      new_data[[pred]] <- input[[paste0("input_", pred)]]
    }
    
    # Add Gender to the new_data for prediction
    new_data$Gender <- input$input_Gender
    
    # Predict stroke probability
    prediction <- predict(model, newdata = new_data, type = "response")
    
    # Display the prediction result
    output$prediction_result <- renderText({
      paste("Predicted probability of stroke:", round(prediction, 4))
    })
  })
```



#BROKEN RECIPE
```{r}

  # StrokeRecipe <- recipe(Stroke ~ ., data = strokeDataSet) %>%
  #   step_zv(all_predictors()) %>%
  #   step_impute_mode(all_nominal_predictors()) %>%
  #   step_impute_median(all_numeric_predictors()) %>%
  #   step_corr(all_numeric_predictors(), threshold = 0.8) %>%
  #   step_dummy(all_nominal_predictors(), -all_outcomes()) %>%
  #   prep()
  # print('hi')
  # 
  # # Split the data
  # set.seed(123)
  # data_split <- initial_split(strokeDataSet, prop = 0.75)
  # train_data <- training(data_split)
  # test_data <- testing(data_split)
  # 
  # 
  # 
  # 
  # 
  # # Apply the recipe
  # train_data <- bake(StrokeRecipe, new_data = train_data)
  # test_data <- bake(StrokeRecipe, new_data = test_data)
  # 
  # # Model specification using glmnet for regularization
  # print('hi')
  # levels(StrokeData$Stroke)
  # StrokeData$Stroke <- factor(StrokeData$Stroke)
  # logistic_spec <- logistic_reg(mode = "classification", penalty = 0) %>%
  #  set_engine("glmnet")
  # logistic_fit <- fit(logistic_spec, Stroke ~ ., data = train_data)
  # print('hi')

```

# MORE BROKEN RECIPE STUFF
```{r}


#newdata$BMI_Category <- factor(newdata$BMI_Category, levels = levels(strokeDataSet$BMI_Category))
    
    # Apply the recipe to newdata
    #newdata_preprocessed <- bake(StrokeRecipe, new_data = newdata)
    
    # Make a prediction for the selected age and/or bmi
    #prediction <- predict(logistic_fit, newdata = newdata_preprocessed, type = "prob")$.pred_1
    
    # Store the model summary and prediction
    #regressionResult(list(model_summary = logistic_fit, prediction = prediction))
    
    # Make a prediction for the selected age and/or bmi

```


### LEFT OVER CODE FROM FIRST PAGE IN UI
```{r}


# Defining each tab panel creates a new page
    # tabPanel("Introduction",
    #   h1("Variable Selection"),
    #   fluidRow(
    #     column(
    #       width = 6, 
    #       sidebarLayout(
    #         sidebarPanel(
    #           width = 7,
    #           div(class = "sidebar-panel",
    #           checkboxGroupInput(
    #             inputId = "predictors",
    #             label = "Select Predictors:",
    #             choices = c(colnames(strokeDataSet)[!(colnames(strokeDataSet) %in% c("Stroke", "id", "BMI"))], "Height & Weight"),
    #             # Exclude the target variable
    #             selected = colnames(strokeDataSet)[!(colnames(strokeDataSet) %in% c("Stroke", "id", "BMI"))[1]] 
    #             # Select the first predictor by default
    #             ),
    #           actionButton("predict", "Predict")
    #           )
    #         ),
    #         mainPanel( width = 5,
    #                   uiOutput("dynamic_inputs"), #verbatimTextOutput("prediction_result"), 
    #         ),
    #       ),
    #       
    #     ),
    #     column( width = 6,
    #       p("This is a function to create a large amount of text
    #         in an almost paragraph style fashion. This is currently
    #         a test to see how this would look like within the app
    #         once I reload it. It should be able to adapt to the 
    #         pane width and height, making it dynamic in size. 
    #         This side of the tab should be pretty filled, just
    #         like right now. We can change the size of the text
    #         within the CSS file to make sure this text completely
    #         fills the tab.")
    #     )
    #   ),
    #   
    # ),
```

